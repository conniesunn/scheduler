import streamlit as st
from langchain import LLMChain
from langchain.chat_models import ChatOpenAI
from langchain.prompts.chat import (ChatPromptTemplate,
                                    HumanMessagePromptTemplate,
                                    SystemMessagePromptTemplate)
from langchain.document_loaders import *
from langchain.chains.summarize import load_summarize_chain
import tempfile
from langchain.docstore.document import Document

st.title("Scheduler")

availability = st.text_area("Enter your availability and preferences for scheduling")

def meetingScheduler(availability):
    chat = ChatOpenAI(
        model="gpt-3.5-turbo-16k",
        temperature=0
    )
    system_template = """You are an AI assistant tasked with generating potential meeting times based on the user's {availability} and preferences."""
    system_message_prompt = SystemMessagePromptTemplate.from_template(system_template)
    human_template = """Based on the provided {availability}, please generate potential meeting times."""
    human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)
    chat_prompt = ChatPromptTemplate.from_messages(
        [system_message_prompt, human_message_prompt]
    )

    chain = LLMChain(llm=chat, prompt=chat_prompt)
    result = chain.run(availability=availability)
    return result

selected_time = ""
if availability:
    potential_times = meetingScheduler(availability)
    st.markdown("Potential Meeting Times:")
    st.markdown(potential_times)

    selected_time = st.text_input("Enter your selected meeting time")

def meetingConfirmation(selected_time):
    chat = ChatOpenAI(
        model="gpt-3.5-turbo-16k",
        temperature=0
    )
    system_template = """You are responsible for confirming the meeting time and providing any additional details or instructions."""
    system_message_prompt = SystemMessagePromptTemplate.from_template(system_template)
    human_template = """The selected meeting time is {selected_time}. Please confirm this time and provide any additional details or instructions."""
    human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)
    chat_prompt = ChatPromptTemplate.from_messages(
        [system_message_prompt, human_message_prompt]
    )

    chain = LLMChain(llm=chat, prompt=chat_prompt)
    result = chain.run(selected_time=selected_time)
    return result

confirmed_time = ""
if selected_time:
    confirmed_time = meetingConfirmation(selected_time)
    st.markdown("Confirmed Meeting Time:")
    st.markdown(confirmed_time)
